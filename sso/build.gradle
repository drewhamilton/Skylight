apply plugin: 'java-library'
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'

ext {
  artifact = 'skylight-sso'
  bintrayName = 'Skylight-sso'
  libraryName = 'Skylight: sunrise-sunset.org'

  libraryDescription = 'A Skylight implementation that uses sunrise-sunset.org to retrieve skylight information.'

  compatibility = [
      ignoreMissingClasses: false,
      excludedModules: []
  ]
}
apply from: '../gradle/publish.gradle'

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

  api project(':skylight')

  def moshiVersion = '1.8.0'
  implementation "com.squareup.moshi:moshi:$moshiVersion"
  implementation "com.squareup.moshi:moshi-kotlin:$moshiVersion"

  def retrofitVersion = '2.6.0'
  implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
  implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"

  implementation "com.google.dagger:dagger:$daggerVersion"
  kapt "com.google.dagger:dagger-compiler:$daggerVersion"

  testImplementation 'junit:junit:4.12'
  testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
  testImplementation 'com.squareup.okhttp3:mockwebserver:3.14.1'
  testImplementation 'org.mockito:mockito-inline:2.28.2'
  testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

// TODO WORKAROUND: Get this to work in its own file
//region Compatibility
configurations {
  baseline
  latest
}

dependencies {
  baseline("$publishedGroupId:$artifact:$compatibleVersion") {
    transitive false
    force true
    exclude module: 'skylight'
  }
  latest(project(path: ":$project.name")) {
    exclude module: 'skylight'
  }
}

apply plugin: 'me.champeau.gradle.japicmp'
//noinspection UnnecessaryQualifiedReference
task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask) {

  oldClasspath = configurations.baseline.incoming.artifactView { config ->
    config.attributes { container ->
      container.attribute(Attribute.of("artifactType", String.class), "jar")
    }
  }.artifacts.artifactFiles

  newClasspath = configurations.latest.incoming.artifactView { config ->
    config.attributes { container ->
      container.attribute(Attribute.of("artifactType", String.class), "jar")
    }
  }.artifacts.artifactFiles

  onlyBinaryIncompatibleModified true
  failOnModification failIfIncompatible
  txtOutputFile = file("$buildDir/reports/japi.txt")

  // TODO WORKAROUND: Can't find Skylight, not sure why
  ignoreMissingClasses true
}

check.dependsOn(japicmp)
build.dependsOn(check)
//endregion
